// Generated by gencpp from file iiwa_driver/ConnectionQuality.msg
// DO NOT EDIT!


#ifndef IIWA_DRIVER_MESSAGE_CONNECTIONQUALITY_H
#define IIWA_DRIVER_MESSAGE_CONNECTIONQUALITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iiwa_driver
{
template <class ContainerAllocator>
struct ConnectionQuality_
{
  typedef ConnectionQuality_<ContainerAllocator> Type;

  ConnectionQuality_()
    : connection_quality(0)  {
    }
  ConnectionQuality_(const ContainerAllocator& _alloc)
    : connection_quality(0)  {
  (void)_alloc;
    }



   typedef int8_t _connection_quality_type;
  _connection_quality_type connection_quality;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POOR)
  #undef POOR
#endif
#if defined(_WIN32) && defined(FAIR)
  #undef FAIR
#endif
#if defined(_WIN32) && defined(GOOD)
  #undef GOOD
#endif
#if defined(_WIN32) && defined(EXCELLENT)
  #undef EXCELLENT
#endif

  enum {
    POOR = 0,
    FAIR = 1,
    GOOD = 2,
    EXCELLENT = 3,
  };


  typedef boost::shared_ptr< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> const> ConstPtr;

}; // struct ConnectionQuality_

typedef ::iiwa_driver::ConnectionQuality_<std::allocator<void> > ConnectionQuality;

typedef boost::shared_ptr< ::iiwa_driver::ConnectionQuality > ConnectionQualityPtr;
typedef boost::shared_ptr< ::iiwa_driver::ConnectionQuality const> ConnectionQualityConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_driver::ConnectionQuality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iiwa_driver::ConnectionQuality_<ContainerAllocator1> & lhs, const ::iiwa_driver::ConnectionQuality_<ContainerAllocator2> & rhs)
{
  return lhs.connection_quality == rhs.connection_quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iiwa_driver::ConnectionQuality_<ContainerAllocator1> & lhs, const ::iiwa_driver::ConnectionQuality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iiwa_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36b844413f3c0379a097d5209770c460";
  }

  static const char* value(const ::iiwa_driver::ConnectionQuality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36b844413f3c0379ULL;
  static const uint64_t static_value2 = 0xa097d5209770c460ULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_driver/ConnectionQuality";
  }

  static const char* value(const ::iiwa_driver::ConnectionQuality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 connection_quality\n"
"int8 POOR = 0       # poor connection quality\n"
"int8 FAIR = 1       # connection quality insufficient for command mode\n"
"int8 GOOD = 2       # connection quality sufficient for command mode\n"
"int8 EXCELLENT = 3  # excellent connection quality\n"
;
  }

  static const char* value(const ::iiwa_driver::ConnectionQuality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connection_quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConnectionQuality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_driver::ConnectionQuality_<ContainerAllocator>& v)
  {
    s << indent << "connection_quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.connection_quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_DRIVER_MESSAGE_CONNECTIONQUALITY_H
