// Generated by gencpp from file iiwa_driver/FRIState.msg
// DO NOT EDIT!


#ifndef IIWA_DRIVER_MESSAGE_FRISTATE_H
#define IIWA_DRIVER_MESSAGE_FRISTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <iiwa_driver/ConnectionQuality.h>

namespace iiwa_driver
{
template <class ContainerAllocator>
struct FRIState_
{
  typedef FRIState_<ContainerAllocator> Type;

  FRIState_()
    : header()
    , connection_quality()  {
    }
  FRIState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , connection_quality(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::iiwa_driver::ConnectionQuality_<ContainerAllocator>  _connection_quality_type;
  _connection_quality_type connection_quality;





  typedef boost::shared_ptr< ::iiwa_driver::FRIState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_driver::FRIState_<ContainerAllocator> const> ConstPtr;

}; // struct FRIState_

typedef ::iiwa_driver::FRIState_<std::allocator<void> > FRIState;

typedef boost::shared_ptr< ::iiwa_driver::FRIState > FRIStatePtr;
typedef boost::shared_ptr< ::iiwa_driver::FRIState const> FRIStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_driver::FRIState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_driver::FRIState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iiwa_driver::FRIState_<ContainerAllocator1> & lhs, const ::iiwa_driver::FRIState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.connection_quality == rhs.connection_quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iiwa_driver::FRIState_<ContainerAllocator1> & lhs, const ::iiwa_driver::FRIState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iiwa_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iiwa_driver::FRIState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_driver::FRIState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_driver::FRIState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_driver::FRIState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_driver::FRIState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_driver::FRIState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_driver::FRIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfb94c18d53e239b6ba45eb1dfbb3c46";
  }

  static const char* value(const ::iiwa_driver::FRIState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfb94c18d53e239bULL;
  static const uint64_t static_value2 = 0x6ba45eb1dfbb3c46ULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_driver::FRIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_driver/FRIState";
  }

  static const char* value(const ::iiwa_driver::FRIState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_driver::FRIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"ConnectionQuality connection_quality\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: iiwa_driver/ConnectionQuality\n"
"int8 connection_quality\n"
"int8 POOR = 0       # poor connection quality\n"
"int8 FAIR = 1       # connection quality insufficient for command mode\n"
"int8 GOOD = 2       # connection quality sufficient for command mode\n"
"int8 EXCELLENT = 3  # excellent connection quality\n"
;
  }

  static const char* value(const ::iiwa_driver::FRIState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_driver::FRIState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.connection_quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FRIState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_driver::FRIState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_driver::FRIState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "connection_quality: ";
    s << std::endl;
    Printer< ::iiwa_driver::ConnectionQuality_<ContainerAllocator> >::stream(s, indent + "  ", v.connection_quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_DRIVER_MESSAGE_FRISTATE_H
