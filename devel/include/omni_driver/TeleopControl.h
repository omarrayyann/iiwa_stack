// Generated by gencpp from file omni_driver/TeleopControl.msg
// DO NOT EDIT!


#ifndef OMNI_DRIVER_MESSAGE_TELEOPCONTROL_H
#define OMNI_DRIVER_MESSAGE_TELEOPCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace omni_driver
{
template <class ContainerAllocator>
struct TeleopControl_
{
  typedef TeleopControl_<ContainerAllocator> Type;

  TeleopControl_()
    : vel_joint()
    , vel_effector()
    , mode(0)  {
    }
  TeleopControl_(const ContainerAllocator& _alloc)
    : vel_joint(_alloc)
    , vel_effector(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _vel_joint_type;
  _vel_joint_type vel_joint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _vel_effector_type;
  _vel_effector_type vel_effector;

   typedef uint8_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::omni_driver::TeleopControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::omni_driver::TeleopControl_<ContainerAllocator> const> ConstPtr;

}; // struct TeleopControl_

typedef ::omni_driver::TeleopControl_<std::allocator<void> > TeleopControl;

typedef boost::shared_ptr< ::omni_driver::TeleopControl > TeleopControlPtr;
typedef boost::shared_ptr< ::omni_driver::TeleopControl const> TeleopControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::omni_driver::TeleopControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::omni_driver::TeleopControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::omni_driver::TeleopControl_<ContainerAllocator1> & lhs, const ::omni_driver::TeleopControl_<ContainerAllocator2> & rhs)
{
  return lhs.vel_joint == rhs.vel_joint &&
    lhs.vel_effector == rhs.vel_effector &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::omni_driver::TeleopControl_<ContainerAllocator1> & lhs, const ::omni_driver::TeleopControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace omni_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::omni_driver::TeleopControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::omni_driver::TeleopControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omni_driver::TeleopControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::omni_driver::TeleopControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omni_driver::TeleopControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::omni_driver::TeleopControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::omni_driver::TeleopControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acc00fe3a847581a668e7968e27d235a";
  }

  static const char* value(const ::omni_driver::TeleopControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacc00fe3a847581aULL;
  static const uint64_t static_value2 = 0x668e7968e27d235aULL;
};

template<class ContainerAllocator>
struct DataType< ::omni_driver::TeleopControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "omni_driver/TeleopControl";
  }

  static const char* value(const ::omni_driver::TeleopControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::omni_driver::TeleopControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] vel_joint\n"
"float64[] vel_effector\n"
"uint8 mode\n"
;
  }

  static const char* value(const ::omni_driver::TeleopControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::omni_driver::TeleopControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_joint);
      stream.next(m.vel_effector);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeleopControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::omni_driver::TeleopControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::omni_driver::TeleopControl_<ContainerAllocator>& v)
  {
    s << indent << "vel_joint[]" << std::endl;
    for (size_t i = 0; i < v.vel_joint.size(); ++i)
    {
      s << indent << "  vel_joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel_joint[i]);
    }
    s << indent << "vel_effector[]" << std::endl;
    for (size_t i = 0; i < v.vel_effector.size(); ++i)
    {
      s << indent << "  vel_effector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel_effector[i]);
    }
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OMNI_DRIVER_MESSAGE_TELEOPCONTROL_H
