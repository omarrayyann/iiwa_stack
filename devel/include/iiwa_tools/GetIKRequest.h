// Generated by gencpp from file iiwa_tools/GetIKRequest.msg
// DO NOT EDIT!


#ifndef IIWA_TOOLS_MESSAGE_GETIKREQUEST_H
#define IIWA_TOOLS_MESSAGE_GETIKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <std_msgs/Float64MultiArray.h>

namespace iiwa_tools
{
template <class ContainerAllocator>
struct GetIKRequest_
{
  typedef GetIKRequest_<ContainerAllocator> Type;

  GetIKRequest_()
    : poses()
    , seed_angles()
    , tolerance(0.0)
    , max_iterations(0)
    , slack()
    , damping()  {
    }
  GetIKRequest_(const ContainerAllocator& _alloc)
    : poses(_alloc)
    , seed_angles(_alloc)
    , tolerance(0.0)
    , max_iterations(0)
    , slack(_alloc)
    , damping(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _seed_angles_type;
  _seed_angles_type seed_angles;

   typedef float _tolerance_type;
  _tolerance_type tolerance;

   typedef int32_t _max_iterations_type;
  _max_iterations_type max_iterations;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _slack_type;
  _slack_type slack;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _damping_type;
  _damping_type damping;





  typedef boost::shared_ptr< ::iiwa_tools::GetIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_tools::GetIKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetIKRequest_

typedef ::iiwa_tools::GetIKRequest_<std::allocator<void> > GetIKRequest;

typedef boost::shared_ptr< ::iiwa_tools::GetIKRequest > GetIKRequestPtr;
typedef boost::shared_ptr< ::iiwa_tools::GetIKRequest const> GetIKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_tools::GetIKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iiwa_tools::GetIKRequest_<ContainerAllocator1> & lhs, const ::iiwa_tools::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return lhs.poses == rhs.poses &&
    lhs.seed_angles == rhs.seed_angles &&
    lhs.tolerance == rhs.tolerance &&
    lhs.max_iterations == rhs.max_iterations &&
    lhs.slack == rhs.slack &&
    lhs.damping == rhs.damping;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iiwa_tools::GetIKRequest_<ContainerAllocator1> & lhs, const ::iiwa_tools::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iiwa_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_tools::GetIKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_tools::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_tools::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "025eec0a15f1fb0f0427b8ebfade6c5b";
  }

  static const char* value(const ::iiwa_tools::GetIKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x025eec0a15f1fb0fULL;
  static const uint64_t static_value2 = 0x0427b8ebfade6c5bULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_tools/GetIKRequest";
  }

  static const char* value(const ::iiwa_tools::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# end-effector poses to request IK for\n"
"geometry_msgs/Pose[] poses\n"
"\n"
"# (optional) initial joint position seeds for IK solver\n"
"# one for each pose\n"
"std_msgs/Float64MultiArray seed_angles\n"
"\n"
"# (optional) optimization parameters\n"
"float32 tolerance\n"
"int32 max_iterations\n"
"float64[] slack\n"
"float64[] damping\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::iiwa_tools::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poses);
      stream.next(m.seed_angles);
      stream.next(m.tolerance);
      stream.next(m.max_iterations);
      stream.next(m.slack);
      stream.next(m.damping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_tools::GetIKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_tools::GetIKRequest_<ContainerAllocator>& v)
  {
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "seed_angles: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.seed_angles);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
    s << indent << "max_iterations: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_iterations);
    s << indent << "slack[]" << std::endl;
    for (size_t i = 0; i < v.slack.size(); ++i)
    {
      s << indent << "  slack[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.slack[i]);
    }
    s << indent << "damping[]" << std::endl;
    for (size_t i = 0; i < v.damping.size(); ++i)
    {
      s << indent << "  damping[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.damping[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_TOOLS_MESSAGE_GETIKREQUEST_H
