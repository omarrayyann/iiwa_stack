// Generated by gencpp from file iiwa_tools/GetGravityRequest.msg
// DO NOT EDIT!


#ifndef IIWA_TOOLS_MESSAGE_GETGRAVITYREQUEST_H
#define IIWA_TOOLS_MESSAGE_GETGRAVITYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iiwa_tools
{
template <class ContainerAllocator>
struct GetGravityRequest_
{
  typedef GetGravityRequest_<ContainerAllocator> Type;

  GetGravityRequest_()
    : joint_angles()
    , joint_velocities()
    , joint_torques()
    , gravity()  {
    }
  GetGravityRequest_(const ContainerAllocator& _alloc)
    : joint_angles(_alloc)
    , joint_velocities(_alloc)
    , joint_torques(_alloc)
    , gravity(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_velocities_type;
  _joint_velocities_type joint_velocities;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_torques_type;
  _joint_torques_type joint_torques;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gravity_type;
  _gravity_type gravity;





  typedef boost::shared_ptr< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetGravityRequest_

typedef ::iiwa_tools::GetGravityRequest_<std::allocator<void> > GetGravityRequest;

typedef boost::shared_ptr< ::iiwa_tools::GetGravityRequest > GetGravityRequestPtr;
typedef boost::shared_ptr< ::iiwa_tools::GetGravityRequest const> GetGravityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_tools::GetGravityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iiwa_tools::GetGravityRequest_<ContainerAllocator1> & lhs, const ::iiwa_tools::GetGravityRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_angles == rhs.joint_angles &&
    lhs.joint_velocities == rhs.joint_velocities &&
    lhs.joint_torques == rhs.joint_torques &&
    lhs.gravity == rhs.gravity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iiwa_tools::GetGravityRequest_<ContainerAllocator1> & lhs, const ::iiwa_tools::GetGravityRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iiwa_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "738487fbb5146bacce2e357c2b11e501";
  }

  static const char* value(const ::iiwa_tools::GetGravityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x738487fbb5146bacULL;
  static const uint64_t static_value2 = 0xce2e357c2b11e501ULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_tools/GetGravityRequest";
  }

  static const char* value(const ::iiwa_tools::GetGravityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_angles\n"
"float64[] joint_velocities\n"
"float64[] joint_torques\n"
"float64[] gravity\n"
;
  }

  static const char* value(const ::iiwa_tools::GetGravityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_angles);
      stream.next(m.joint_velocities);
      stream.next(m.joint_torques);
      stream.next(m.gravity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGravityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_tools::GetGravityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_tools::GetGravityRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "joint_velocities[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocities.size(); ++i)
    {
      s << indent << "  joint_velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocities[i]);
    }
    s << indent << "joint_torques[]" << std::endl;
    for (size_t i = 0; i < v.joint_torques.size(); ++i)
    {
      s << indent << "  joint_torques[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_torques[i]);
    }
    s << indent << "gravity[]" << std::endl;
    for (size_t i = 0; i < v.gravity.size(); ++i)
    {
      s << indent << "  gravity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gravity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_TOOLS_MESSAGE_GETGRAVITYREQUEST_H
